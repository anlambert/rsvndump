rsvndump(1)
===========
:man source:	rsvndump
:man version:	{version}
:man manual:	User commands

NAME
----
rsvndump - Dumps a remote Subversion repository


SYNOPSIS
--------
*rsvndump* [options] 'url'


DESCRIPTION
-----------
*rsvndump* dumps a Subversion repository without having actual access to the
repository data, as required by the "*svnadmin*(1) dump" command.

If invoked with valid options, *rsvndump* will print a dump file to 'stdout'
and optional progress to 'stderr'.

Since *rsvndump* is also able to dump subdirectories of a repository, or
dumping only a specified revision range, the revision numbers in the dump
don't neccessarily reflect the original revision numbers. This behaviour
is described in detail in the *REVISION NUMBERS* section.


OPTIONS
-------
*-h*::
*--help*::
Print a nice help screen

*-q*::
*--quiet*::
Don't print any progress

*-v*::
*--verbose*::
Print detailed progress

*-u*::
*--username* 'username'::
Username for repository authentication.
If not specified and the repository does not provide anonymous access,
the policy is to try your username first and finally ask for a
username on 'stdin'.

*-p*::
*--password* 'password'::
Password for repository authentication.
If not specified and the repository does not provide anonymous access,
the password will be prompted on 'stdin'.

*-r*::
*--revision* 'X' or 'X:Y'::
Specifiy the revision (or revision range) that should be dumped. 'X'
and 'Y' can either be a number or "HEAD".
The default revision range is "0:HEAD", i.e. the complete revision
history.

*--deltas*::
Use text deltas instead of full texts in dump output

*--incremental*::
Create incremental output, suitable for concatenation. This results 
in a dump that does not contain a dumpfile header and no full base
revision if the revision range does not start at 0.

*--prefix* 'prefix'::
Prepend a given prefix to every node which is dumped. The first
revision dumped will also contain the paths neccessary to create the
prefix.
+
Please note that is assumed that prefix is really just a prefix
string, with directories seperated by "/". Therefore you need to
append a "/" at the end of the string to make it a directory.
For example, a prefix of *myrepo/old_* might result in the following
layout:
----
myrepo 
 |- old_branches
 |- old_tags
 |- old_trunk
----

*--keep-revnums*::
	Keep the revision numbers in the output in sync with the repository.
	This is done by inserting empty revisions for padding if neccessary.

*--dump-uuid*::
	Include the UUID of the repository in the dump output.
	Please note that this is only allowed if you are dumping the root
	of a repository without any additional prefix.



REVISION NUMBERS
----------------
The revision numbers inside the dump depend on the options and the path that
are given to *rsvndump*. If you are dumping the root of a repository, you
don't need to worry about revision numbers out of sync, of course. If you
are dumping a subdirectory, only the revisions that changed this subdirectory
will occur in the dump output. The revision numbers in the dump will still be
sequential, so they will differ from the original ones.

The following flags change this behaviour:

- The *--keep-revnums* flag padds revisions that did not change the subdirectory
with empty revisions. They don't have an author or date property, but contain
the log message "This is an empty revision for padding.".


DIFFERENCES TO SVNADMIN DUMP
----------------------------
The output generated by *rsvndump* may differ from the one generated by
*svnadmin*(1) because *rsvndump* may handle file or directory copies
different than *svnadmin*(1). The latter does not support dumping of
subdirectories within a repository out of the box. Instead, the
*svndumpfilter*(1) tool will do this job. However, sometimes subdirectories
cannot be filtered exclusively with *svndumpfilter*(1) because they have been
copied from another place.

Since *rsvndump* has been designed to allow dumps of subdirectories if
your repository access is limited to this subdirectory (in fact, that was the
primary reason this project exists), it will not access other subdirectories
than the one you want to dump. As a result, dumping a branch will most likely
not result in the full history of the branch as it might have been copied from
trunk at some point in time.

This is also the reason why *rsvndump* will *not* dump a copy action if the
source of the copy is not inside the directory tree which is currently being
dumped. Instead, the contents in question will simply be dumped as if they had
been added to the repository.


EXIT STATUS
-----------
0 on success, 1 on failure. Any error messages will be printed to 'stderr'.


SEE ALSO
--------
*svn*(1), *svnadmin*(1), *svndumpfilter*(1)


COPYING
-------
Copyright (C) 2008-2009 Jonas Gehring <\jonas.gehring@boolsoft.org>.
Released under the GNU General Public License.
